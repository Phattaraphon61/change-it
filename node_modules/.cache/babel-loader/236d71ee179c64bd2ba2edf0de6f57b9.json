{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_bootstrap_1 = require(\"react-bootstrap\");\n\nvar Prompts_1 = require(\"./Prompts\");\n\nvar PromptInput_1 = __importDefault(require(\"./PromptInput\"));\n\nvar DialogAction_1 = __importDefault(require(\"./DialogAction\")); // XXX: Check current ReactBootstrap v4 later, or not.\n\n\nvar isLaterV4 = function () {\n  var anyModal = react_bootstrap_1.Modal; // eslint-disable-line @typescript-eslint/no-explicit-any\n\n  return !anyModal.childContextTypes;\n}();\n/**\n * The modal dialog which can be altenative to `window.confirm` and `window.alert`.\n * @example <Dialog ref={(el) => {this.dialog = el} />\n * @example this.dialog.show({body: 'Hello!', actions: [Dialog.Action('do', () => console.log('ok'))]})\n * @example this.dialog.showAlert('Hello!')\n */\n\n\nvar Dialog =\n/** @class */\nfunction (_super) {\n  __extends(Dialog, _super);\n\n  function Dialog(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.promptInput = null;\n    _this.keyBinds = {};\n    _this.state = Dialog.initialState();\n    _this.onHide = _this.onHide.bind(_this);\n    _this.onSubmitPrompt = _this.onSubmitPrompt.bind(_this);\n    return _this;\n  }\n  /**\n   * Set default options for applying to all dialogs.\n   * @param options\n   */\n\n\n  Dialog.setOptions = function (options) {\n    Dialog.options = Object.assign({}, Dialog.DEFAULT_OPTIONS, options);\n  };\n  /**\n   * Reset default options to presets.\n   */\n\n\n  Dialog.resetOptions = function () {\n    Dialog.options = Dialog.DEFAULT_OPTIONS;\n  };\n\n  Dialog.initialState = function () {\n    return {\n      title: null,\n      body: null,\n      showModal: false,\n      actions: [],\n      bsSize: undefined,\n      onHide: null,\n      prompt: null\n    };\n  };\n\n  Dialog.prototype.componentWillUnmount = function () {\n    if (this.state.showModal) {\n      this.hide();\n    }\n  };\n  /**\n   * Show dialog with choices. This is similar to `window.confirm`.\n   * @param options Object for dialog options.\n   * @param options.title The title of dialog.\n   * @param options.body The body of message.\n   * @param options.actions {DialogAction} The choices for presenting to user.\n   * @param options.bsSize {[null, 'medium', 'large', 'small']} The width size for dialog.\n   * @param options.onHide {function} The method to call when the dialog was closed by clicking background.\n   * @param options.prompt {[null, Prompt]} Use prompt for text input or password input.\n   */\n\n\n  Dialog.prototype.show = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var keyBinds = {};\n    var newOptions = Object.assign({}, options);\n    var actions = newOptions.actions,\n        prompt = newOptions.prompt; // If has prompt and click button assigned enter key,\n    // Execute validation at first.\n\n    if (actions && prompt) {\n      newOptions.actions = actions.map(function (action) {\n        var key = action.key;\n\n        if (!(key && key.includes('enter'))) {\n          // Not enter button, so return\n          return action;\n        } // It's enter button, let's validate\n\n\n        var newAction = Object.assign({}, action);\n\n        newAction.func = function (dialog) {\n          if (!(dialog.promptInput && dialog.promptInput.checkValidity())) {\n            return false;\n          }\n\n          action.func(_this);\n        };\n\n        return newAction;\n      });\n    } // Setup key binds\n\n\n    newOptions.actions && newOptions.actions.forEach(function (action) {\n      if (action.key) {\n        action.key.split(',').forEach(function (key) {\n          keyBinds[key] = function () {\n            action.func(_this);\n          };\n        });\n      }\n    }); // TODO: Add keybinds\n\n    this.keyBinds = keyBinds;\n    this.setState(Object.assign({}, Dialog.initialState(), newOptions, {\n      showModal: true\n    }));\n  };\n  /**\n   * Show message dialog This is similar to `window.alert`.\n   * @param body The body of message.\n   * @param bsSize {[null, 'medium', 'large', 'small']} The width size for dialog.\n   */\n\n\n  Dialog.prototype.showAlert = function (body, bsSize) {\n    if (bsSize === void 0) {\n      bsSize = undefined;\n    }\n\n    var options = {\n      body: body,\n      actions: [Dialog.SingleOKAction()],\n      bsSize: bsSize\n    };\n    this.show(options);\n  };\n\n  Dialog.prototype.onHide = function () {\n    var onHide = this.state.onHide;\n\n    if (typeof onHide === 'function') {\n      onHide(this);\n    } else {\n      this.hide();\n    }\n  };\n  /**\n   * Hide this dialog.\n   */\n\n\n  Dialog.prototype.hide = function () {\n    if (!this.state.showModal) return; // TODO: Remove keybinds\n\n    this.setState({\n      showModal: false\n    });\n  };\n\n  Object.defineProperty(Dialog.prototype, \"value\", {\n    /**\n     * Get the value in prompt.\n     * @return {string, null}\n     */\n    get: function get() {\n      if (this.promptInput) {\n        return this.promptInput.value;\n      }\n\n      return null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Dialog.prototype.onSubmitPrompt = function () {\n    var action = this.keyBinds && this.keyBinds['enter'];\n    action && action();\n  };\n\n  Dialog.prototype.getSize = function (defaultSize) {\n    return typeof this.state.bsSize === 'undefined' ? defaultSize : this.state.bsSize === 'medium' ? null : this.state.bsSize;\n  };\n\n  Dialog.prototype.render = function () {\n    var _this = this;\n\n    var additionalProps = isLaterV4 ? {\n      size: this.getSize('sm')\n    } : {\n      bsSize: this.getSize('small')\n    };\n    return react_1.default.createElement(react_bootstrap_1.Modal, __assign({\n      show: this.state.showModal,\n      onHide: this.onHide\n    }, additionalProps), this.state.title && react_1.default.createElement(react_bootstrap_1.Modal.Header, null, react_1.default.createElement(react_bootstrap_1.Modal.Title, null, this.state.title)), react_1.default.createElement(react_bootstrap_1.Modal.Body, null, typeof this.state.body === 'string' ? react_1.default.createElement(\"p\", null, this.state.body) : this.state.body, this.state.prompt && react_1.default.createElement(PromptInput_1.default, {\n      ref: function ref(el) {\n        _this.promptInput = el;\n      },\n      prompt: this.state.prompt,\n      onSubmit: this.onSubmitPrompt\n    })), react_1.default.createElement(react_bootstrap_1.Modal.Footer, null, this.state.actions && this.state.actions.map(function (action, index) {\n      return react_1.default.createElement(\"button\", {\n        key: index,\n        type: 'button',\n        className: \"btn btn-sm \" + action.className,\n        onClick: function onClick() {\n          action.func && action.func(_this);\n        },\n        style: {\n          minWidth: 82\n        }\n      }, action.label);\n    })));\n  };\n\n  Dialog.DEFAULT_OPTIONS = {\n    defaultOkLabel: 'OK',\n    defaultCancelLabel: 'Cancel',\n    primaryClassName: 'btn-primary',\n    defaultButtonClassName: 'btn-default btn-outline-secondary'\n  };\n  Dialog.options = Dialog.DEFAULT_OPTIONS;\n\n  Dialog.Action = function (label, func, className, key) {\n    return new DialogAction_1.default(label, func, className, key);\n  };\n\n  Dialog.DefaultAction = function (label, func, className) {\n    return new DialogAction_1.default(label, func, className && className.length > 0 ? className : Dialog.options.primaryClassName, 'enter');\n  };\n\n  Dialog.OKAction = function (func) {\n    return new DialogAction_1.default(Dialog.options.defaultOkLabel, function (dialog) {\n      dialog.hide();\n      func && func(dialog);\n    }, Dialog.options.primaryClassName, 'enter');\n  };\n\n  Dialog.CancelAction = function (func) {\n    return new DialogAction_1.default(Dialog.options.defaultCancelLabel, function (dialog) {\n      dialog.hide();\n      func && func(dialog);\n    }, null, 'esc');\n  };\n\n  Dialog.SingleOKAction = function () {\n    return new DialogAction_1.default(Dialog.options.defaultOkLabel, function (dialog) {\n      dialog.hide();\n    }, Dialog.options.primaryClassName, 'enter,esc');\n  };\n\n  Dialog.TextPrompt = function (options) {\n    return new Prompts_1.TextPrompt(options);\n  };\n\n  Dialog.PasswordPrompt = function (options) {\n    return new Prompts_1.PasswordPrompt(options);\n  };\n\n  Dialog.displayName = 'Dialog';\n  return Dialog;\n}(react_1.default.Component);\n\nexports.default = Dialog;","map":null,"metadata":{},"sourceType":"script"}